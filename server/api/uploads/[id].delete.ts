import dbConnect from '~/server/utils/db'
import { defineEventHandler, setResponseStatus } from 'h3'
import mongoose from 'mongoose'
import FileModel from '~/server/models/file'
import Timeline from '~/server/models/Timeline'

export default defineEventHandler(async (event) => {
  await dbConnect()

  const id = event.context.params?.id
  if (!id || !mongoose.isValidObjectId(id)) {
    setResponseStatus(event, 400)
    return { success: false, code: 'BAD_ID', user_message: '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }
  }

  // üëá cast type ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Å‡∏±‡∏ô TS 2339
  const file = await FileModel.findById(id)
    .select('_id request_no step')
    .lean()
    .exec() as null | { _id: any; request_no: string; step: string | number }

  if (!file?._id) {
    setResponseStatus(event, 404)
    return { success: false, code: 'NOT_FOUND', user_message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå' }
  }

  // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å
  await FileModel.deleteOne({ _id: file._id })

  // ‡∏¢‡πâ‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ timeline -> pending ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á reference ‡πÑ‡∏ü‡∏•‡πå/‡πÄ‡∏ß‡∏•‡∏≤
  const unsetFields: Record<string, any> = {
    'steps.$.file': '',
    'steps.$.createdAt': '',
    'steps.$.document_no': '',
    'steps.$.amount': '',
    'steps.$.date_signed': ''
  }

  // ‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö steps.no ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô number
  // ‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢ string ‡∏Å‡πà‡∏≠‡∏ô ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏≠‡∏á number
  const stepAsString = typeof file.step === 'string' ? file.step : String(file.step)
  let res = await Timeline.updateOne(
    { request_no: file.request_no, 'steps.no': stepAsString },
    { $set: { 'steps.$.status': 'pending' }, $unset: unsetFields }
  )

  if (res.modifiedCount === 0) {
    const stepAsNumber = typeof file.step === 'number' ? file.step : Number(file.step)
    if (!Number.isNaN(stepAsNumber)) {
      res = await Timeline.updateOne(
        { request_no: file.request_no, 'steps.no': stepAsNumber },
        { $set: { 'steps.$.status': 'pending' }, $unset: unsetFields }
      )
    }
  }

  return { success: true, modified: res.modifiedCount, user_message: '‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' }
})
